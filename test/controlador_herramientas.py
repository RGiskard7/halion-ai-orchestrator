import os
import re
import json
import datetime
import streamlit as st
from dynamic_tool_registry import register_tool
from tool_manager import load_all_tools, set_tool_status

def crear_herramienta_desde_codigo(codigo: str, log_file: str = "debug_logs/creacion_directa.log"):
    """
    Funci√≥n que crea una herramienta a partir del c√≥digo generado por la IA.
    Esta es una versi√≥n simplificada y directa del controlador en streamlit_app.py.
    
    Args:
        codigo (str): El c√≥digo de la herramienta a crear
        log_file (str): Archivo donde se registrar√° el proceso
    
    Returns:
        bool: True si la herramienta se cre√≥ correctamente, False en caso contrario
    """
    with open(log_file, "a") as log:
        log.write(f"\n\n--- NUEVA CREACI√ìN DE HERRAMIENTA {datetime.datetime.now().isoformat()} ---\n")
        log.write(f"Longitud del c√≥digo: {len(codigo)} caracteres\n")
        
        # 1. Extraer nombre de la funci√≥n
        func_match = re.search(r'def\s+(\w+)', codigo)
        if not func_match:
            log.write("ERROR: No se pudo encontrar el nombre de la funci√≥n\n")
            return False
        
        tool_name = func_match.group(1)
        log.write(f"Nombre de herramienta extra√≠do: {tool_name}\n")
        
        # 2. Determinar ruta del archivo
        tools_path = os.path.join(os.getcwd(), "tools")
        file_path = os.path.join(tools_path, f"{tool_name}.py")
        log.write(f"Ruta absoluta del archivo: {file_path}\n")
        
        # 3. Verificar directorio
        if not os.path.exists(tools_path):
            log.write(f"Creando directorio tools: {tools_path}\n")
            os.makedirs(tools_path)
        
        # 4. Crear el archivo
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(codigo)
            
            exists = os.path.exists(file_path)
            log.write(f"¬øArchivo creado?: {exists}\n")
            
            if exists:
                log.write(f"Tama√±o del archivo: {os.path.getsize(file_path)} bytes\n")
                
                # 5. Activar la herramienta en el sistema
                set_tool_status(tool_name, True)
                log.write(f"Herramienta activada: {tool_name}\n")
                
                # 6. Recargar las herramientas
                log.write("Recargando todas las herramientas...\n")
                load_all_tools()
                
                log.write("‚úÖ PROCESO COMPLETADO CON √âXITO\n")
                return True
            else:
                log.write("‚ùå ERROR: No se pudo crear el archivo\n")
                return False
                
        except Exception as e:
            log.write(f"‚ùå ERROR: {str(e)}\n")
            import traceback
            log.write(f"TRACEBACK: {traceback.format_exc()}\n")
            return False


def interfaz_simplificada():
    """
    Interfaz Streamlit simplificada para probar la creaci√≥n de herramientas
    """
    st.title("üîß Controlador de Herramientas Simplificado")
    
    st.write("""
    Esta es una interfaz simplificada para diagnosticar problemas con la creaci√≥n de herramientas.
    Si funciona aqu√≠ pero no en la aplicaci√≥n principal, sabemos que el problema est√° en el proceso dentro de la aplicaci√≥n.
    """)
    
    # Ejemplo de c√≥digo de herramienta
    ejemplo_codigo = '''
def suma_numeros(a: int, b: int) -> int:
    """
    Suma dos n√∫meros enteros.
    
    Args:
        a (int): Primer n√∫mero
        b (int): Segundo n√∫mero
        
    Returns:
        int: La suma de los dos n√∫meros
    """
    return a + b

schema = {
    "name": "suma_numeros",
    "description": "Suma dos n√∫meros enteros",
    "postprocess": True,
    "parameters": {
        "type": "object",
        "properties": {
            "a": {
                "type": "integer",
                "description": "Primer n√∫mero"
            },
            "b": {
                "type": "integer",
                "description": "Segundo n√∫mero"
            }
        },
        "required": ["a", "b"]
    }
}
'''
    
    codigo = st.text_area("C√≥digo de la herramienta", value=ejemplo_codigo, height=400)
    
    if st.button("Crear Herramienta"):
        with st.spinner("Creando herramienta..."):
            resultado = crear_herramienta_desde_codigo(codigo)
            
            if resultado:
                st.success("‚úÖ Herramienta creada correctamente")
                st.write("Verificando si est√° disponible en el sistema...")
                
                # Obtener el nombre de la herramienta
                func_match = re.search(r'def\s+(\w+)', codigo)
                tool_name = func_match.group(1) if func_match else "desconocida"
                
                # Verificar si se puede importar
                try:
                    spec = __import__(f"tools.{tool_name}", fromlist=[tool_name])
                    st.success(f"‚úÖ La herramienta '{tool_name}' se import√≥ correctamente")
                except ImportError:
                    st.error(f"‚ùå No se pudo importar la herramienta '{tool_name}'")
            else:
                st.error("‚ùå Error al crear la herramienta. Revisa los logs para m√°s detalles.")
                
                with open("debug_logs/creacion_directa.log", "r") as log:
                    lines = log.readlines()
                    if lines:
                        # Mostrar las √∫ltimas 20 l√≠neas del log
                        st.code("".join(lines[-20:]))

if __name__ == "__main__":
    # Si ejecutamos este script directamente, mostramos la interfaz
    interfaz_simplificada() 